---
// TitleBadge.astro
interface Props {
  rank: 1 | 2 | 3 | 4 | 5 | 6
}

const { rank } = Astro.props

const badges = {
  1: {
    text: "Kind Of A Big Deal",
    color: "#62A4DA",
    size: "small",
  },
  2: {
    text: "People Know Me",
    color: "#1a9306",
    size: "small",
  },
  3: {
    text: "I'm Very Important",
    color: "#fcd00b",
    size: "small",
  },
  4: {
    text: "I Have Many Leather-Bound Books",
    color: "#ffa405",
    size: "medium",
  },
  5: {
    text: "My Homelab Smells of Rich Mahogany",
    color: "#fb3e8d",
    size: "medium",
  },
  6: {
    text: "God Walking Amongst Mere Mortals",
    color: "#4C139D",
    size: "large",
  },
}

const badge = badges[rank]

// Calculate particle count based on rank
const particleCount = rank >= 3 ? Math.min(5 + (rank - 3) * 5, 20) : 0
---

<div
  class:list={[
    "badge",
    `rank-${rank}`,
    `size-${badge.size}`,
    { "with-particles": rank >= 3 },
  ]}
>
  {
    rank >= 3 && (
      <div class="particles">
        {[...Array(particleCount)].map(() => (
          <div class="particle" />
        ))}
      </div>
    )
  }
  <span class="text">{badge.text}</span>
</div>

<style define:vars={{ badgeColor: badge.color }}>
  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background-color: var(--badgeColor);
    border: 2px solid var(--badgeColor);
    border-radius: 9999px;
    position: relative;
    overflow: hidden;
    font-weight: 600;
    color: white;
    padding: 0.25rem 0.75rem;
    transition: all 0.3s ease;
  }

  .size-small {
    font-size: 0.875rem;
  }

  .size-medium {
    font-size: 1rem;
    padding: 0.375rem 1rem;
  }

  .size-large {
    font-size: 1.125rem;
    padding: 0.5rem 1.25rem;
  }

  /* Rank-specific styles with gradual progression */
  .rank-1 {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .rank-2 {
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
    animation: subtleGlow 3s ease-in-out infinite;
  }

  .rank-3 {
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
    animation: subtleGlow 2.5s ease-in-out infinite;
  }

  .rank-4 {
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    animation: glow 2.5s ease-in-out infinite;
  }

  .rank-5 {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.4);
    animation: glow 2s ease-in-out infinite;
  }

  .rank-6 {
    box-shadow:
      0 8px 16px rgba(0, 0, 0, 0.4),
      0 0 30px var(--badgeColor),
      0 0 60px rgba(76, 19, 157, 0.4);
    text-shadow:
      2px 2px 8px rgba(0, 0, 0, 0.6),
      0 0 20px rgba(255, 255, 255, 0.8);
    animation: epicGlow 1.5s ease-in-out infinite;
  }

  /* Particle effects with gradual progression */
  .particles {
    position: absolute;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .particle {
    position: absolute;
    width: 3px;
    height: 3px;
    border-radius: 50%;
    opacity: 0;
  }

  .rank-3 .particle {
    background: rgba(255, 255, 255, 0.6);
    width: 2px;
    height: 2px;
    animation: particle 4s ease-in-out infinite;
  }

  .rank-4 .particle {
    background: rgba(255, 255, 255, 0.7);
    width: 3px;
    height: 3px;
    animation: particle 3.5s ease-in-out infinite;
  }

  .rank-5 .particle {
    background: rgba(255, 255, 255, 0.8);
    animation: particle 3s ease-in-out infinite;
  }

  .rank-6 .particle {
    background: rgba(147, 112, 219, 0.9);
    box-shadow: 0 0 4px rgba(76, 19, 157, 0.6);
    width: 4px;
    height: 4px;
    animation: particle 2.5s ease-in-out infinite;
  }

  @keyframes subtleGlow {
    0%,
    100% {
      filter: brightness(1);
    }
    50% {
      filter: brightness(1.1);
    }
  }

  @keyframes glow {
    0%,
    100% {
      filter: brightness(1);
    }
    50% {
      filter: brightness(1.15);
    }
  }

  @keyframes epicGlow {
    0%,
    100% {
      filter: brightness(1) contrast(1);
      transform: scale(1);
    }
    50% {
      filter: brightness(1.2) contrast(1.1);
      transform: scale(1.02);
    }
  }

  @keyframes particle {
    0% {
      transform: translate(0, 0);
      opacity: 0;
    }
    50% {
      opacity: 0.8;
    }
    100% {
      transform: translate(
        calc(var(--random-x, 0) * 100px),
        calc(var(--random-y, 0) * 100px)
      );
      opacity: 0;
    }
  }

  /* Hover effects with gradual progression */
  .rank-1:hover {
    transform: translateY(-1px);
  }

  .rank-2:hover {
    transform: translateY(-1px) scale(1.01);
  }

  .rank-3:hover {
    transform: translateY(-1px) scale(1.02);
  }

  .rank-4:hover {
    transform: translateY(-2px) scale(1.02);
  }

  .rank-5:hover {
    transform: translateY(-2px) scale(1.03);
  }

  .rank-6:hover {
    transform: translateY(-3px) scale(1.04);
    box-shadow:
      0 12px 24px rgba(0, 0, 0, 0.4),
      0 0 40px var(--badgeColor),
      0 0 80px rgba(76, 19, 157, 0.6);
  }
</style>

<script>
  function updateParticles() {
    const particles = document.querySelectorAll(".particle")
    particles.forEach((particle) => {
      particle.style.setProperty(
        "--random-x",
        (Math.random() * 2 - 1).toString()
      )
      particle.style.setProperty(
        "--random-y",
        (Math.random() * 2 - 1).toString()
      )

      particle.style.left = Math.random() * 100 + "%"
      particle.style.top = Math.random() * 100 + "%"
    })
  }

  setInterval(updateParticles, 2000)
  updateParticles()
</script>
