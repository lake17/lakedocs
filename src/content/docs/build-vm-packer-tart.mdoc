---
title: Build an Ubuntu VM on macOS with cloud-init, Packer and Tart
banner:
  content: THIS WAS WORKING BUT THEN I BROKE IT AND AM NOT SURE HOW
tags:
  - miscellaneous
  - macos
category: tutorial
owner: ezekiel.nye@forfusion.com
createdOn: 2024-10-14
createdBy: ezekiel.nye@forfusion.com
---

In this tutorial, you'll learn how to:

- Configure [cloud-init](https://cloud-init.io/) for zero-touch provisioning of VM images
- Use the Tart plugin for [Hashicorp Packer](https://www.hashicorp.com/products/packer) to create a template VM
- Clone new VMs from your template and run them with [Tart](https://tart.run/)

This tutorial is intended for those who don't know better and are still doing _v12n_ the old way with something like VirtualBox; for those who want to know how to take advantage of the latest features of macOS like Apple's new [virtualization framework](https://developer.apple.com/documentation/virtualization); and for those who just love a nice tart.

It assumes some basic knowledge of virtualization, shell, Linux and macOS.

By the end of this tutorial, you should be able to create your own VM template with Packer from sources other than the Ubuntu cloud image we'll be using here, configured to suit your needs with cloud-init.

## Before you start

This tutorial was written on an MBP running 15.0.1 Sequoia; the closer you are to that version the better. The use of homebrew is assumed; let's get our prereqs installed:

```shell
brew update
brew install gnupg hashicorp/tap/packer cirruslabs/cli/tart
brew cleanup
```

## Acquiring an Ubuntu cloud image for use as a base

Huh? A cloud image?\
Yes Grandad, a [_cloud image_](https://help.ubuntu.com/community/UEC/Images). Gone are the days of burning eyesohs to your ceedeez, nuts to that!
With a cloud image we don't need to go through an install process, we can boot the thing straight up and get started.

But before we do - **Yes** I am going to make you verify the signature and checksum of your downloads.
**Yes** that is the only reason I made you install `gnupg`.
**No** you aren't allowed to skip this part.
It's good practice, and really not that much effort.

1. Fetch the image, checksum and signature files

   ```shell
   mkdir build && cd $_
   curl --remote-name-all https://cloud-images.ubuntu.com/\
   releases/noble/release-20241004/\
   {ubuntu-24.04-server-cloudimg-arm64.img,\
   SHA256SUMS,SHA256SUMS.gpg}
   ```

   I recommend creating a temporary directory to work from for easy cleanup later on.
   Notice that we are fetching a particular release (**20241004**) and not latest/current - if you want to avoid "works on my machine" situations, always explicitly define versions!

1. Verify the chastity of this newly acquired data

   a. Test the signature of the checksums file SHA256SUMS

   `gpg --keyid-format long --verify SHA256SUMS.gpg SHA256SUMS`

   If you do not already have the signing key in your keyring (you don't), you will get an error. We can use the provided fingerprint to fetch the key from Canonical's keyserver:

   ```shell
   gpg --keyid-format long\
    --keyserver hkps://keyserver.ubuntu.com\
    --recv-keys D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81
   ```

   b. Check the hash of the image we downloaded

   `shasum --algorithm 256 --ignore-missing --check SHA256SUMS`

   If the hash doesn't check out, [99 times out of 100](https://www.theregister.com/2016/02/21/linux_mint_hacked_malwareinfected_isos_linked_from_official_site/) it's a transient problem, probably caused by cosmic rays or something. Download each file individually (to prevent any electrical infetterence) and it'll be fine.

   If it is wrong a second time, and you happen to be a journalist _slash_ whistleblower _slash_ enemy-of-the-state...

## Preparing a cloud-init disk

The Tart plugin for Packer requires a certain minimal configuration in order to build VMs.
We aren't going to manually _log in_ to this image and make the changes - heaven forfend - we're going to use cloud-init!

We will create an iso9660 disk from a local directory populated with our configuration files, and use Packer to pass it to the VM at build time.
We'll create the arbitrarily-named directory `cidata`, and in what will be the root directory of our disk, three very-much-not-arbitrarily-named files like so:

1. meta-data

   ```shell
   mkdir cidata
   touch cidata/meta-data
   ```

   This file is where one would configure settings important for cloud hosting; we have no need for it, but its presence is mandatory.

1. user-data

   ```yaml
   cat > cidata/user-data << "EOF"
   #cloud-config
   
   users:
   - name: admin
       primary_group: admin
       plain_text_passwd: admin
       sudo: ALL=(ALL) NOPASSWD:ALL
       lock_passwd: false
       shell: /bin/bash
   ssh_pwauth: true
   EOF
   ```

1. network-config

```yaml
    cat > cidata/network-config << "EOF"
#cloud-config
---
version: 2
ethernets:
  all:
    match:
      name: en*
    dhcp4: true
    dhcp-identifier: mac

EOF
```

Then finally from this directory we can create our disk.

```shell
hdiutil makehybrid -joliet -iso\
 -default-volume-name CIDATA\
 -o cidata.iso cidata
```

N.B. the filesystem **must** be labelled (case-sensitive and **lower-case** despite what the official documentation says!) cidata, which we achieve here with the `-default-volume-name` flag

## Creating the Packer configuration file

Now that we've got both our Ubuntu cloud image and our CIDATA iso image, we can put the two into Packer and build our template VM. The Packer configuration file is made up of three components.

1. The packer block

   ```hcl
   cat > TEMPLE8_ubuntu_20241004.pkr.hcl << "EOF"
   packer {
   required_plugins {
       tart = {
       source  = "github.com/cirruslabs/tart"
       version = "= 1.14.0"
       }
     }
   }
   EOF
   ```

1. The source block

   ```hcl
   cat >> TEMPLE8_ubuntu_20241004.pkr.hcl << "EOF"
   source "tart-cli" "tart" {
     vm_name = "TEMPLE8_ubuntu_20241004"
     disk_size_gb = 5
     run_extra_args = ["--disk", "cidata.iso"]
     headless = true
     disable_vnc = true
     ssh_username = "admin"
     ssh_password = "admin"
   }
   EOF
   ```

1. The build block

   ```hcl
    cat >> TEMPLE8_ubuntu_20241004.pkr.hcl << "EOF"
    build {
      sources = ["source.tart-cli.tart"]
    }
    EOF
   ```

   This would normally be the most interesting of the three; here is where all the configuration of the new VM is defined. However in the case of our template VM, we've already done what's needed using cloud-init.

With that, our configuration file is ready to be validated:\
`packer validate TEMPLE8_ubuntu_20241004.pkr.hcl`\
and rewritten into the canonical format:\
`packer fmt TEMPLE8_ubuntu_20241004.pkr.hcl`

## Building the VM

```shell
tart create  --linux TEMPLE8_ubuntu_20241004

qemu-img convert -p -f qcow2 -O raw\
 ubuntu-24.04-server-cloudimg-arm64.img\
 ~/.tart/vms/TEMPLE8_ubuntu_20241004/disk.img
```

Here we use Tart to create the 'scaffolding' for our VM - amongst other things, a new directory in `~/.tart/vms/` to store it. We then move the cloud image to this directory, at the same time converting it from `qcow2` to `raw` and renaming it `disk.img`, which is the format expected by Tart.

`packer init TEMPLE8_ubuntu_20241004.pkr.hcl`\
Downloads the plugin\
`packer build TEMPLE8_ubuntu_20241004.pkr.hcl`\
Build the VM!

You now have a template VM ready to be used, like so:\
`tart clone TEMPLE8_ubuntu_20241004 webserv && tart run webserv`\
Or more realistically, in a new Packer configuration file with the directive `vm_base_name`.
We have in effect just created what is already available at `ghcr.io/cirruslabs/ubuntu:24.04`.
You could have saved yourself a lot of time and effort by just pulling that image and using it instead, you wazzock.

## Summary

In this tutorial, you (hopefully) learned (a little about):

- The convenience and utility of cloud-images
- cloud-init, its uses, and how to configure it locally
- Tart
- Packer
- The importance of validating your file downloads wherever possible!

## Next steps

- Check out Cirrus-CLI and use it to build your own template-creation pipeline that automatically but explicitly pulls each new cloud-image release.
- Read the Packer documentation and use it to fully configure a production-ready VM from this template
