---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro"
import dayjs from "dayjs"
import { LinkCard, Card, CardGrid, Badge, Tabs, TabItem } from "@astrojs/starlight/components"
import MedalBadge from "../components/MedalBadge.astro"
import Mult from "../components/Mult.astro"
import ThreeCardGrid from "../components/ThreeCardGrid.astro"
import team from "../data/team_webex.json"
import wanted from "../data/wanted-docs.json"
import { Image } from "astro:assets"
import eng from "../assets/fusioncare-engineer.webp"

import { getCollection } from "astro:content"
import type { CollectionEntry } from "astro:content"
import { string } from "astro:schema"

// TODO: find out how to do this properly - extend type?
const docs: CollectionEntry<"docs">[] = await getCollection("docs")
const created_docs: CollectionEntry<"docs">[] = docs.filter((x: CollectionEntry<"docs">) => {
  if (x.data.created) {
    return x;
  }
})
const sorted_created_docs: CollectionEntry<"docs">[] = created_docs.sort(
  (a, b) => {
    let adc = a.data.created
    let bdc = b.data.created
    if (adc && bdc) {
      const x = new Date(adc)
      const y = new Date(bdc)
      return y.getTime() - x.getTime()
    }
    throw new Error("cunt")
  }
)
const weekly_docs = sorted_created_docs.filter((m) => {
  if (m.data.created && dayjs(m.data.created).isSame(dayjs(), "week")) {
    return m
  }
})
const monthly_docs = sorted_created_docs.filter((m) => {
  if (m.data.created && dayjs(m.data.created).isSame(dayjs(), "month")) {
    return m
  }
})
let weekly_team_stats = team.map((m) => {
  let c = 0
  for (let n of weekly_docs) {
    if (n.data.owner === m.email) {
      c = c + 1
    }
  }
  return {
    name: m.name,
    pic: m.avatar,
    email: m.email,
    output: c,
  }
})
weekly_team_stats.sort((a, b) => {
  const x = Number(a.output)
  const y = Number(b.output)
  return y - x
})
let monthly_team_stats = team.map((m) => {
  let c = 0
  for (let n of monthly_docs) {
    if (n.data.owner === m.email) {
      c = c + 1
    }
  }
  return {
    name: m.name,
    pic: m.avatar,
    email: m.email,
    output: c,
  }
})
monthly_team_stats.sort((a, b) => {
  const x = Number(a.output)
  const y = Number(b.output)
  return y - x
})
function getMonthsBetween(
  date1: Date,
  date2: Date,
  roundUpFractionalMonths: Boolean
) {
  //Months will be calculated between start and end dates.
  //Make sure start date is less than end date.
  //But remember if the difference should be negative.
  var startDate = date1
  var endDate = date2
  var inverse = false
  if (date1 > date2) {
    startDate = date2
    endDate = date1
    inverse = true
  }

  //Calculate the differences between the start and end dates
  var yearsDifference = endDate.getFullYear() - startDate.getFullYear()
  var monthsDifference = endDate.getMonth() - startDate.getMonth()
  var daysDifference = endDate.getDate() - startDate.getDate()

  var monthCorrection = 0
  //If roundUpFractionalMonths is true, check if an extra month needs to be added from rounding up.
  //The difference is done by ceiling (round up), e.g. 3 months and 1 day will be 4 months.
  if (roundUpFractionalMonths === true && daysDifference > 0) {
    monthCorrection = 1
  }
  //If the day difference between the 2 months is negative, the last month is not a whole month.
  else if (roundUpFractionalMonths !== true && daysDifference < 0) {
    monthCorrection = -1
  }

  return (
    (inverse ? -1 : 1) *
    (yearsDifference * 12 + monthsDifference + monthCorrection)
  )
}

type Stat = {
  output: number
}

const getRank = (stats: Stat[], currentTeam: Stat) => {
    // Sort teams by output in descending order
    const sortedTeams = [...stats].sort((a, b) => b.output - a.output);
    
    let rank = 1;
    let prevScore = null;
    
    for (const team of sortedTeams) {
      if (team.output === currentTeam.output) {
        return rank;
      }
      if (team.output !== prevScore) {
        rank++;
        prevScore = team.output;
      }
    }
    return rank;
  };

---

<StarlightPage frontmatter={{
  title: 'FusionCare Knowledge Base',
  template: 'splash',
  head: [
    {tag:"style",content:`
    .sl-container:where(.astro-7nkwcw3z) { max-width: none !important; }
    h1 { color: #3857eb !important; }
    `},
  ],
  }}>
  <ThreeCardGrid>
    <LinkCard title="Introduction" href="/introduction"></LinkCard>
    <LinkCard title="Documentation" href="/sections"></LinkCard>
    <LinkCard title="Editor" href="/ed"></LinkCard>
    <LinkCard title="Bookmarks" href="/bookmarks"></LinkCard>
    <LinkCard title="Snippets (TODO)" href="/"></LinkCard>
    <LinkCard title="Feeds (TODO)" href="/"></LinkCard>
  </ThreeCardGrid>
  <ThreeCardGrid>
    <Tabs>
    <TabItem label="Weekly Leaderboard"><Card title="Weekly Leaderboard" icon="star">
      <table style="border-collapse: collapse; width: 100%;">
        {
          weekly_team_stats.map((m) => ( 
            <tr>
              <td style="text-align: center">
                {m.pic ? (
                  <Image
                    src={m.pic}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                ) : (
                  <Image
                    src={eng}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                )}
              </td>
              <td style="text-align: left;vertical-align: middle;">{m.name}</td>
              <td style="text-align: center;vertical-align: middle;">{
                  (() => {
                    if (m.output === 0) return '0';
                      const position = weekly_team_stats.findIndex(t => t.output === m.output) + 1 as 1 | 2 | 3;
                      return [1, 2, 3].includes(position) ? (
                              <span>&emsp;</span>
                              <MedalBadge 
                                  text={String(m.output)}
                                  size="medium" 
                                  variant="weekly" 
                                  position={position}
                              />
                      ) : String(m.output);
                  })()
              }</td>
            </tr>
          ))
        }
      </table>
    </Card></TabItem>
    <TabItem label="Monthly Leaderboard"><Card title="Monthly Leaderboard" icon="starlight">
      <table style="border-collapse: collapse; width: 100%;">
        {
          monthly_team_stats.map((m) => ( 
            <tr>
              <td style="text-align: center;">
                {m.pic ? (
                  <Image
                    src={m.pic}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                ) : (
                  <Image
                    src={eng}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                )}
              </td>
              <td style="text-align: left;vertical-align: middle;">{m.name}</td>
              <td style="text-align: center;vertical-align: middle;">
              {
                  (() => {
                      if (m.output === 0) return "0";
                      const position = getRank(monthly_team_stats, m) as 1|2|3
                      return [1, 2, 3].includes(position) ? (
                              <MedalBadge 
                                  text={String(m.output)}
                                  size="medium" 
                                  variant="monthly" 
                                  position={position}
                              />
                      ) : String(m.output);
                  })()
              }
              </td>
              </tr>
          ))
        }
      </table>
    </Card></TabItem>
  </Tabs>
    <Tabs>
      <TabItem label="Hall of Fame"><Card title="Hall of Fame">
        <hr/><h6>JOHN DOE</h6><p>Authored the most documents during the first FusionCare Documentation Drive</p><hr/>
      </Card></TabItem>
      <TabItem label="Hall of Shame"><Card title="Hall of Shame">
        <hr/><h6>YOU</h6><p>If you aren't careful...</p><hr/>
      </Card></TabItem>
    </Tabs>
    <Card title="Title Track" icon="codeberg">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Title</th>
            <th style="text-align: right;">Docs Uploaded</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td style="text-align: center;"><Badge text="Kind Of A Big Deal" size="small" style="color:#000;font-weight:bold;background-color: #62A4DA;border-color:#62A4DA;"></Badge></td>
              <td style="text-align: left;">10</td>
            </tr>
            <tr>
              <td style="text-align: center;">???</td> <!-- <Badge text="People Know Me" size="small" style="background-color:#1a9306;border-color:#1a9306;"></Badge> -->
              <td style="text-align: left;">???</td> <!-- 25 -->
            </tr>
            <tr>
              <td style="text-align: center;">???</td> <!-- <Badge text="I'm Very Important" size="small" style="background-color:#fcd00b;border-color:#fcd00b;"></Badge> -->
              <td style="text-align: left;">???</td> <!-- 50 -->
            </tr>
            <tr>
              <td style="text-align: center;">???</td> <!-- <Badge text="I Have Many Leather-Bound Books" size="medium" style="background-color:#ffa405;border-color:#ffa405;"></Badge> -->
              <td style="text-align: left;">???</td> <!-- 100 -->
            </tr>
            <tr>
              <td style="text-align: center;">???</td> <!-- <Badge text="My Homelab Smells of Rich Mahogany" size="medium" style="background-color:#fb3e8d;border-color:#fb3e8d;"></Badge> -->
              <td style="text-align: left;">???</td> <!-- 500 -->
            </tr>
            <tr>
              <td style="text-align: center;">???</td> <!-- <Badge text="God Walking Amongst Mere Mortals" size="large" style="background-color:#4C139D;border-color:#4C139D;"></Badge> -->
              <td style="text-align: left;">???</td> <!-- 1000 -->
            </tr>
        </tbody> 
      </table>
    </Card>
  </ThreeCardGrid>
  <CardGrid>
    <Card title="Latest Documents" icon="open-book">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Title</th>
            <th style="text-align: right;">Created</th>
          </tr>
        </thead>
        <tbody>
          {
            sorted_created_docs.map((m) => (
              <tr>
                <td><a href={"/"+m.slug+"/"}>{m.data.title}</a></td>
                <td style="text-align: right; white-space: nowrap;">{(m.data.created ? new Date(m.data.created).toISOString().split('T')[0] : "duh i broked sumfin")}</td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </Card>
    <Card title="Wanted Documents" icon="heart">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Title</th>
            <th style="text-alight: right;">Type</th>
            <th style="text-align: right;">Since</th>
            <th style="text-align: right;">Bounty</th>
          </tr>
        </thead>
        <tbody>
            {
                wanted.map((m) => (
                  <tr>
                    <td>{m.title}</td>
                    <td>{m.type}</td>
                    <td style={{ textAlign: 'right', whiteSpace: 'nowrap' }}>{m.since ? m.since.split('T')[0] : "duh i broked sumfin"}
                    </td>
                    <td>
                      <span>
                        <Mult bonus={1 + getMonthsBetween(new Date(Date.now()), new Date(m.since), false) + (m.type === "explanation" ? 1 : 0)} />
                      </span>
                    </td>
                  </tr>
                ))
            }     
        </tbody>
      </table>
    </Card>
  </CardGrid>

</StarlightPage>