---
// Core imports
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

// Component imports
import { LinkCard, Card, CardGrid, Tabs, TabItem } from "@astrojs/starlight/components";
import MedalBadge from "../components/MedalBadge.astro";
import TitleBadge from "../components/TitleBadge.astro";
import Mult from "../components/Mult.astro";
import ThreeCardGrid from "../components/ThreeCardGrid.astro";
import HallComponent from "@components/HallComponent.astro";

// Asset imports
import eng from "../assets/fusioncare-engineer.webp";

// Data imports
import rawTeam from "../data/team.json";
import { TITLE_THRESHOLDS } from "../types";
import { processTeamStats, getPendingRequests } from "../utils/team-stats";
import { getMonthsBetween, getPosition } from "../utils/stats";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";

// Data processing
const docs = await getCollection("docs");
const team = rawTeam.map(member => ({
  ...member,
  rank: member.rank as 1 | 2 | 3 | 4 | 5 | 6
}));

const { sortedDocs, weeklyStats, monthlyStats, allTimeStats } = await processTeamStats(docs, team);
---

<StarlightPage 
  hasSidebar={false} 
  frontmatter={{ 
    title: 'Fusioncare Knowledge Base', 
    tableOfContents: false 
  }}
>
  <ThreeCardGrid>
    <LinkCard title="README" href="/readme" />
    <LinkCard title="Documentation" href="/sections" />
    <LinkCard title="Editor" href="/ed" />
    <LinkCard title="Bookmarks" href="/bookmarks" />
    <LinkCard title="Snippets [TODO]" />
    <LinkCard title="Feeds [TODO]" />
  </ThreeCardGrid>

  <CardGrid>
    <Tabs>
      <TabItem label="Weekly Leaderboard">
        <Card title="Documents Created This Week" icon="star">
          <table style="border-collapse: collapse; width: 100%;">
            {weeklyStats.map((m) => (
              <tr>
                <td style="text-align: center">
                  {(m.avatar && m.avatar !== "undefined") ? (
                    <Image
                      src={m.avatar}
                      alt="Avatar"
                      width="50"
                      height="50"
                      style="border-radius: 50%; object-fit: cover;"
                    />
                  ) : (
                    <Image
                      src={eng}
                      alt="Avatar"
                      width="50"
                      height="50"
                      style="border-radius: 50%; object-fit: cover;"
                    />
                  )}
                </td>
                <td style="text-align: left; vertical-align: middle;">
                  {m.name}
                  {m.rank ? <span>&ensp;</span><TitleBadge rank={m.rank} /> : ""}
                </td>
                <td style="text-align: center; vertical-align: middle;">
                  {(() => {
                    if (m.docs === 0) return '0';
                    const position = weeklyStats.findIndex(t => t.docs === m.docs) + 1 as 1 | 2 | 3;
                    return [1, 2, 3].includes(position) ? (
                      <MedalBadge 
                        text={String(m.docs)}
                        size="medium" 
                        variant="weekly" 
                        position={position}
                      />
                    ) : String(m.docs);
                  })()}
                </td>
              </tr>
            ))}
          </table>
        </Card>
      </TabItem>

      <TabItem label="Monthly Leaderboard">
        <Card title="Documents Created This Month" icon="starlight">
          <table style="border-collapse: collapse; width: 100%;">
            {monthlyStats.map((m) => (
              <tr>
                <td style="text-align: center;">
                  {(m.avatar && m.avatar !== "undefined") ? (
                    <Image
                      src={m.avatar}
                      alt="Avatar"
                      width="50"
                      height="50"
                      style="border-radius: 50%; object-fit: cover;"
                    />
                  ) : (
                    <Image
                      src={eng}
                      alt="Avatar"
                      width="50"
                      height="50"
                      style="border-radius: 50%; object-fit: cover;"
                    />
                  )}
                </td>
                <td style="text-align: left; vertical-align: middle;">
                  {m.name}
                  {m.rank ? <span>&ensp;</span><TitleBadge rank={m.rank} /> : ""}
                </td>
                <td style="text-align: center; vertical-align: middle;">
                  {(() => {
                    if (m.docs === 0) return "0";
                    const position = getPosition(monthlyStats, m) as 1|2|3;
                    return [1, 2, 3].includes(position) ? (
                      <MedalBadge 
                        text={String(m.docs)}
                        size="medium" 
                        variant="monthly" 
                        position={position}
                      />
                    ) : String(m.docs);
                  })()}
                </td>
              </tr>
            ))}
          </table>
        </Card>
      </TabItem>
    </Tabs>

    <HallComponent />

    <Card title="Title Track" icon="seti:grails">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Rank</th>
            <th style="text-align: center;">Title</th>
            <th style="text-align: right;">Score</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="text-align: center;">1</td>
            <td style="text-align: center;"><TitleBadge rank={1} /></td>
            <td style="text-align: right;">{TITLE_THRESHOLDS[1]}</td>
          </tr>
          <tr>
            <td style="text-align: center;">2</td>
            <td style="text-align: center;">???</td>
            <td style="text-align: right;">???</td>
          </tr>
          <tr>
            <td style="text-align: center;">3</td>
            <td style="text-align: center;">???</td>
            <td style="text-align: right;">???</td>
          </tr>
          <tr>
            <td style="text-align: center;">4</td>
            <td style="text-align: center;">???</td>
            <td style="text-align: right;">???</td>
          </tr>
          <tr>
            <td style="text-align: center;">5</td>
            <td style="text-align: center;">???</td>
            <td style="text-align: right;">???</td>
          </tr>
          <tr>
            <td style="text-align: center;">6</td>
            <td style="text-align: center;">???</td>
            <td style="text-align: right;">???</td>
          </tr>
        </tbody>
      </table>
    </Card>

    <Card title="Learning Paths [TODO]" icon="seti:notebook">
      <LinkCard title="Onboarding" />
      <LinkCard title="FusionCare First Line" />
      <LinkCard title="FusionCare Second Line" />
      <LinkCard title="Cisco Technologies" />
      <LinkCard title="Microsoft Technologies" />
    </Card>
    
  </CardGrid>

  <Card title="Latest Documents" icon="document">
    <table style="border-collapse: collapse; width: 100%;">
      <thead>
        <tr>
          <th style="text-align: left;">Title</th>
          <th style="text-align: right;">Created</th>
        </tr>
      </thead>
      <tbody>
        {sortedDocs.map((m) => (
          <tr>
            <td><a href={"/"+m.slug+"/"}>{m.data.title}</a></td>
            <td style="text-align: right; white-space: nowrap;">
              {m.data.createdOn 
                ? new Date(m.data.createdOn).toISOString().split('T')[0] 
                : "duh i broked sumfin"}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </Card>

  <Card title="Requested Documents" icon="heart">
    <table style="border-collapse: collapse; width: 100%;">
      <thead>
        <tr>
          <th style="text-align: left;">Title</th>
          <th style="text-align: left;">Type</th>
          <th style="text-align: right;">Since</th>
          <th style="text-align: right;">Bounty</th>
        </tr>
      </thead>
      <tbody>
        {getPendingRequests().map((request) => {
          const monthsWaiting = getMonthsBetween(new Date(), new Date(request.since));
          let multiplier = 1.2; // Base bounty multiplier
          
          // Add age bonus (up to 0.6 additional)
          multiplier += Math.min(monthsWaiting / 12, 0.6);
          
          // Add type bonus (0.4 for explanations)
          if (request.type === 'explanation') {
            multiplier += 0.4;
          }
          
          // Cap at 3.0x
          multiplier = Math.min(multiplier, 3.0);
          
          return (
            <tr>
              <td>{request.title}</td>
              <td>
                <span>{request.type}</span>
              </td>
              <td style="text-align: right; white-space: nowrap;">
                {request.since}
              </td>
              <td style="text-align: right;">
                <Mult bonus={multiplier} />
              </td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </Card>

  <style>
    .type-badge {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      font-size: 0.875rem;
      font-weight: 500;
      text-transform: capitalize;
    }
    
    .type-badge.procedure {
      background-color: #e9ecef;
      color: #495057;
    }
    
    .type-badge.explanation {
      background-color: #cff4fc;
      color: #055160;
    }
    
    .type-badge.reference {
      background-color: #fff3cd;
      color: #664d03;
    }
    
    .tag {
      display: inline-block;
      padding: 0.125rem 0.375rem;
      margin: 0.125rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      background-color: #f8f9fa;
      color: #6c757d;
      border: 1px solid #dee2e6;
    }
  </style>

  <Card title="Statistics" icon="seti:odata">
    <table style="border-collapse: collapse; width: 100%;">
      <thead>
        <tr>
          <th></th>
          <th style="text-align: left;">Name</th>
          <th style="text-align: center;">Docs</th>
          <th style="text-align: right;">Percentage</th>
          <th style="text-align: right;">Words</th>
          <th style="text-align: right;">Percentage</th>
          <th style="text-align: right;">Score</th>
        </tr>
      </thead>
      <tbody>
        {allTimeStats.map((member) => {
          return (
            <tr>
              <td style="text-align: center">
                {(member.avatar && member.avatar !== "undefined") ? (
                  <Image
                    src={member.avatar}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                ) : (
                  <Image
                    src={eng}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                )}
              </td>
              <td style="text-align: left; vertical-align: middle; white-space: nowrap;">
                {member.name}
                {member.rank ? (
                  <span>&ensp;<TitleBadge rank={member.rank}/></span>
                ) : null}
              </td>
              <td style="text-align: center; vertical-align: middle;">
                {member.docs}
              </td>
              <td style="text-align: right; vertical-align: middle;">
                {Math.trunc(member.docs / sortedDocs.length * 100)}
              </td>
              <td style="text-align: right; vertical-align: middle;">
                {member.words}
              </td>
              <td style="text-align: right; vertical-align: middle;">
                {Math.trunc(member.words / sortedDocs.reduce((total, doc) => total + doc.body.length, 0) * 100)}
              </td>
              <td style="text-align: right; vertical-align: middle;">
                {member.score}
              </td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </Card>
</StarlightPage>