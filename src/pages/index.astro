---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro"
import dayjs from "dayjs"
import { LinkCard, Card, CardGrid, Tabs, TabItem } from "@astrojs/starlight/components"
import MedalBadge from "../components/MedalBadge.astro"
import TitleBadge from "../components/TitleBadge.astro"
import Mult from "../components/Mult.astro"
import ThreeCardGrid from "../components/ThreeCardGrid.astro"
import rawTeam from "../data/team_webex.json"
const team = rawTeam.map(member => ({
  ...member,
  rank: member.rank as 1 | 2 | 3 | 4 | 5 | 6
}));
import wanted from "../data/wanted-docs.json"
import { Image } from "astro:assets"
import eng from "../assets/fusioncare-engineer.webp"
import { getCollection } from "astro:content"
import type { CollectionEntry } from "astro:content"
import HallComponent from "@components/HallComponent.astro"

// TODO: find out how to do this properly - extend type?
const docs: CollectionEntry<"docs">[] = await getCollection("docs")

interface TeamMember {
  name: string;
  avatar: string;
  email: string;
  rank: 1|2|3|4|5|6;
  bonus: number;
  id: string;
}

interface TeamStats extends TeamMember {
  output: number;
}

// Helper function to get docs with created date
const getCreatedDocs = (docs: CollectionEntry<"docs">[]) => 
  docs.filter((x) => x.data.createdOn);

// Helper function to sort docs by created date
const sortByCreatedDate = (docs: CollectionEntry<"docs">[]) => 
  docs.sort((a, b) => {
    const aDate = new Date(a.data.createdOn!);
    const bDate = new Date(b.data.createdOn!);
    return bDate.getTime() - aDate.getTime();
  });

// Helper function to filter docs by time period
const filterByTimePeriod = (docs: CollectionEntry<"docs">[], period: "week" | "month") =>
  docs.filter((m) => m.data.createdOn && dayjs(m.data.createdOn).isSame(dayjs(), period));

// Helper function to calculate team stats
const calculateTeamStats = (team: TeamMember[], periodDocs: CollectionEntry<"docs">[]) => {
  const stats = team.map((m) => ({
    ...m,
    output: periodDocs.filter((n) => n.data.owner === m.email).length
  }));

  return stats.sort((a, b) => b.output - a.output);
};

// Main function to process docs and generate stats
const processTeamStats = async (docs: CollectionEntry<"docs">[], team: TeamMember[]) => {
  const createdDocs = getCreatedDocs(docs);
  const sortedDocs = sortByCreatedDate(createdDocs);
  
  const weeklyDocs = filterByTimePeriod(sortedDocs, "week");
  const monthlyDocs = filterByTimePeriod(sortedDocs, "month");
  
  const weeklyStats = calculateTeamStats(team, weeklyDocs);
  const monthlyStats = calculateTeamStats(team, monthlyDocs);
  
  return { sortedDocs, weeklyStats, monthlyStats };
};

// Usage
const { sortedDocs, weeklyStats, monthlyStats } = await processTeamStats(docs, team);
function getMonthsBetween(date1: Date, date2: Date): number {
  const d1 = dayjs(date1);
  const d2 = dayjs(date2);
  
  const years = d1.year() - d2.year();
  const months = d1.month() - d2.month();
  const days = d1.date() - d2.date();
  
  const monthCorrection = days < 0 ? -1 : 0;
  
  return years * 12 + months + monthCorrection;
}

const getRank = (stats: TeamStats[], currentTeam: TeamStats) => {
    // Sort teams by output in descending order
    const sortedTeams = [...stats].sort((a, b) => b.output - a.output);
    
    let rank = 1;
    let prevScore = null;
    
    for (const team of sortedTeams) {
      if (team.output === currentTeam.output) {
        return rank;
      }
      if (team.output !== prevScore) {
        rank++;
        prevScore = team.output;
      }
    }
    return rank;
  };

---

<StarlightPage frontmatter={{
  title: 'FusionCare Knowledge Base',
  template: 'splash',
  head: [
    {tag:"style",content:`
    .sl-container:where(.astro-7nkwcw3z) { max-width: none !important; }
    h1 { color: var(--sl-color-accent) !important; }
    `},
  ],
  }}>
  <ThreeCardGrid>
    <LinkCard title="README" href="/readme"></LinkCard>
    <LinkCard title="Documentation" href="/sections"></LinkCard>
    <LinkCard title="Editor" href="/ed"></LinkCard>
    <LinkCard title="Bookmarks" href="/bookmarks"></LinkCard>
    <LinkCard title="Snippets [TODO]"></LinkCard>
    <LinkCard title="Feeds [TODO]"></LinkCard>
  </ThreeCardGrid>
  <CardGrid>
    <Tabs>
    <TabItem label="Weekly Leaderboard">
      <Card title="Documents Created This Week" icon="star">
      <table style="border-collapse: collapse; width: 100%;">
        {
          weeklyStats.map((m) => ( 
            <tr>
              <td style="text-align: center">
                {m.avatar ? (
                  <Image
                    src={m.avatar}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                ) : (
                  <Image
                    src={eng}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                )}
              </td>
              <td style="text-align: left;vertical-align: middle;">{m.name}{m.rank ? <span>&ensp;</span><TitleBadge rank={m.rank}/> : ""}</td>
              <td style="text-align: center;vertical-align: middle;">{
                  (() => {
                    if (m.output === 0) return '0';
                      const position = weeklyStats.findIndex(t => t.output === m.output) + 1 as 1 | 2 | 3;
                      return [1, 2, 3].includes(position) ? (
                              <MedalBadge 
                                  text={String(m.output)}
                                  size="medium" 
                                  variant="weekly" 
                                  position={position}
                              />
                      ) : String(m.output);
                  })()
              }</td>
            </tr>
          ))
        }
      </table>
    </Card>
  </TabItem>
    <TabItem label="Monthly Leaderboard">
      <Card title="Documents Created This Month" icon="starlight">
      <table style="border-collapse: collapse; width: 100%;">
        {
          monthlyStats.map((m) => ( 
            <tr>
              <td style="text-align: center;">
                {m.avatar ? (
                  <Image
                    src={m.avatar}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                ) : (
                  <Image
                    src={eng}
                    alt="Avatar"
                    width="50"
                    height="50"
                    style="border-radius: 50%; object-fit: cover;"
                  />
                )}
              </td>
              <td style="text-align: left;vertical-align: middle;">{m.name}{m.rank ? <span>&ensp;</span><TitleBadge rank={m.rank}/> : ""}</td>
              <td style="text-align: center;vertical-align: middle;">
              {
                  (() => {
                      if (m.output === 0) return "0";
                      const position = getRank(monthlyStats, m) as 1|2|3
                      return [1, 2, 3].includes(position) ? (
                              <MedalBadge 
                                  text={String(m.output)}
                                  size="medium" 
                                  variant="monthly" 
                                  position={position}
                              />
                      ) : String(m.output);
                  })()
              }
              </td>
              </tr>
          ))
        }
      </table>
    </Card>
  </TabItem>
  <TabItem label="Title Track">
    <Card title="Titles" icon="codeberg">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Rank</th>
            <th style="text-align: center;">Title</th>
            <th style="text-align: right;">Documents Created</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="text-align: center;">1</td>
            <td style="text-align: center;"><TitleBadge rank={1} /></td>
            <!-- <Badge text="Kind Of A Big Deal" size="small" style="background-color: #62A4DA;border-color:#62A4DA;"></Badge> -->
            <td style="text-align: right;">10</td>
            <!-- 25 -->
          </tr>
          <tr>
            <td style="text-align: center;">2</td>
            <td style="text-align: center;">???</td>
            <!-- <Badge text="People Know Me" size="small" style="background-color:#1a9306;border-color:#1a9306;"></Badge> -->
            <td style="text-align: right;">???</td>
            <!-- 25 -->
          </tr>
          <tr>
            <td style="text-align: center;">3</td>
            <td style="text-align: center;">???</td>
            <!-- <Badge text="I'm Very Important" size="small" style="background-color:#fcd00b;border-color:#fcd00b;"></Badge> -->
            <td style="text-align: right;">???</td>
            <!-- 50 -->
          </tr>
          <tr>
            <td style="text-align: center;">4</td>
            <td style="text-align: center;">???</td>
            <!-- <Badge text="I Have Many Leather-Bound Books" size="medium" style="background-color:#ffa405;border-color:#ffa405;"></Badge> -->
            <td style="text-align: right;">???</td>
            <!-- 100 -->
          </tr>
          <tr>
            <td style="text-align: center;">5</td>
            <td style="text-align: center;">???</td>
            <!-- <Badge text="My Homelab Smells of Rich Mahogany" size="medium" style="background-color:#fb3e8d;border-color:#fb3e8d;"></Badge> -->
            <td style="text-align: right;">???</td>
            <!-- 500 -->
          </tr>
          <tr>
            <td style="text-align: center;">6</td>
            <td style="text-align: center;">???</td>
            <!-- <Badge text="God Walking Amongst Mere Mortals" size="large" style="background-color:#4C139D;border-color:#4C139D;"></Badge> -->
            <td style="text-align: right;">???</td>
            <!-- 1000 -->
          </tr>
        </tbody>
      </table>
    </Card>
  </TabItem>
    </Tabs>
    <HallComponent/>
    <Card title="Latest Documents" icon="document">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Title</th>
            <th style="text-align: right;">Created</th>
          </tr>
        </thead>
        <tbody>
          {
            sortedDocs.map((m) => (
              <tr>
                <td><a href={"/"+m.slug+"/"}>{m.data.title}</a></td>
                <td style="text-align: right; white-space: nowrap;">{(m.data.createdOn ? new Date(m.data.createdOn).toISOString().split('T')[0] : "duh i broked sumfin")}</td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </Card>
    <Card title="Wanted Documents" icon="heart">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Title</th>
            <th style="text-alight: right;">Type</th>
            <th style="text-align: right;">Since</th>
            <th style="text-align: right;">Bounty</th>
          </tr>
        </thead>
        <tbody>
            {
                wanted.map((m) => (
                  <tr>
                    <td>{m.title}</td>
                    <td>{m.type}</td>
                    <td style={{ textAlign: 'right', whiteSpace: 'nowrap' }}>{m.since ? m.since.split('T')[0] : "duh i broked sumfin"}
                    </td>
                    <td>
                      <span>
                        <Mult bonus={1 + getMonthsBetween(new Date(Date.now()), new Date(m.since)) + (m.type === "explanation" ? 1 : 0)} />
                      </span>
                    </td>
                  </tr>
                ))
            }     
        </tbody>
      </table>
    </Card>
    <Card title="Learning Paths [TODO]">
      <LinkCard title="Onboarding"></LinkCard>
      <LinkCard title="FusionCare First Line"></LinkCard>
      <LinkCard title="FusionCare Second Line"></LinkCard>
      <LinkCard title="Cisco Technologies"></LinkCard>
      <LinkCard title="Microsoft Technologies"></LinkCard>
    </Card>
    </CardGrid>
</StarlightPage>