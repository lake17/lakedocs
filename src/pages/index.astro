---
// Core imports
import { getCollection } from "astro:content"
import { Image } from "astro:assets"

// Component imports
import {
  LinkCard,
  Card,
  CardGrid,
  Tabs,
  TabItem,
} from "@astrojs/starlight/components"
import Leaderboard from "@components/Leaderboard.astro"
import TitleBadge from "../components/TitleBadge.astro"
import Mult from "../components/Mult.astro"
import ThreeCardGrid from "../components/ThreeCardGrid.astro"
import HallComponent from "@components/HallComponent.astro"

// Asset imports
import eng from "../assets/fusioncare-engineer.webp"

// Type imports
import type { Rank } from "../types"

// Data imports
import rawTeam from "../data/team.json"
import { TITLE_THRESHOLDS } from "../types"
import { processTeamStats, getPendingRequests } from "../utils/team-stats"
import { getMonthsBetween } from "../utils/stats"
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro"

// Data processing
const docs = await getCollection("docs")
const team = rawTeam.map((member) => ({
  ...member,
  rank: member.rank as Rank,
}))

const { sortedDocs, weeklyStats, monthlyStats, allTimeStats } =
  await processTeamStats(docs, team)
---

<StarlightPage
  hasSidebar={false}
  frontmatter={{
    title: "FusionCare Knowledge Base",
    tableOfContents: false,
    pagefind: false,
  }}
>
  <ThreeCardGrid>
    <LinkCard title="README" href="/readme" />
    <LinkCard title="Documentation" href="/tags" />
    <LinkCard title="Editor" href="/ed" />
    <LinkCard title="Bookmarks" href="/bookmarks" />
    <LinkCard title="Snippets [TODO]" />
    <LinkCard title="Feeds [TODO]" />
  </ThreeCardGrid>

  <CardGrid>
    <Tabs>
      <TabItem label="Weekly Leaderboard">
        <Leaderboard
          stats={weeklyStats}
          variant="weekly"
          title="Points Earned This Week"
          defaultAvatar={eng}
        />
      </TabItem>

      <TabItem label="Monthly Leaderboard">
        <Leaderboard
          stats={monthlyStats}
          variant="monthly"
          title="Points Earned This Month"
          icon="starlight"
          defaultAvatar={eng}
        />
      </TabItem>
    </Tabs>

    <HallComponent />

    <Card title="Title Track" icon="seti:grails">
      <table style="border-collapse: collapse; width: 100%;">
        <thead>
          <tr>
            <th style="text-align: left;">Rank</th>
            <th style="text-align: center;">Title</th>
            <th style="text-align: center;">Score</th>
          </tr>
        </thead>
        <tbody>
          {
            (() => {
              const ranks: Rank[] = [1, 2, 3, 4, 5, 6]
              return ranks.map((rank) => (
                <tr>
                  <td style="text-align: center;">{rank}</td>
                  <td style="text-align: center;">
                    {allTimeStats[0].score > TITLE_THRESHOLDS[rank] ? (
                      <TitleBadge rank={rank} />
                    ) : (
                      "???"
                    )}
                  </td>
                  <td style="text-align: center;">
                    {allTimeStats[0].score > TITLE_THRESHOLDS[rank]
                      ? TITLE_THRESHOLDS[rank]
                      : "???"}
                  </td>
                </tr>
              ))
            })()
          }
        </tbody>
      </table>
    </Card>

    <Card title="Learning Paths [TODO]" icon="seti:notebook">
      <LinkCard title="Onboarding" />
      <LinkCard title="FusionCare First Line" />
      <LinkCard title="FusionCare Second Line" />
      <LinkCard title="Cisco Technologies" />
      <LinkCard title="Microsoft Technologies" />
    </Card>
  </CardGrid>

  <Card title="Latest Documents" icon="document">
    <table style="border-collapse: collapse; width: 100%;">
      <thead>
        <tr>
          <th style="text-align: left;">Title</th>
          <th style="text-align: center;">Created By</th>
          <th style="text-align: center;">Created On</th>
        </tr>
      </thead>
      <tbody>
        {
          sortedDocs.map((doc) => (
            <tr>
              <td>
                <a href={"/" + doc.slug + "/"}>{doc.data.title}</a>
              </td>
              <td>{doc.data.createdBy}</td>
              <td style="text-align: center; white-space: nowrap;">
                {doc.data.createdOn}
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </Card>

  <Card title="Requested Documents" icon="heart">
    <table style="border-collapse: collapse; width: 100%;">
      <thead>
        <tr>
          <th style="text-align: left;">Title</th>
          <th style="text-align: left;">Type</th>
          <th style="text-align: center;">Since</th>
          <th style="text-align: center;">Bounty</th>
        </tr>
      </thead>
      <tbody>
        {
          getPendingRequests().map((request) => {
            const monthsWaiting = getMonthsBetween(
              new Date(),
              new Date(request.since)
            )
            let multiplier = 1.2 // Base bounty multiplier

            // Add age bonus (up to 0.6 additional)
            multiplier += Math.min(monthsWaiting / 12, 0.6)

            // Add type bonus (0.4 for explanations)
            if (request.type === "explanation") {
              multiplier += 0.4
            }

            // Cap at 3.0x
            multiplier = Math.min(multiplier, 3.0)

            return (
              <tr>
                <td>{request.title}</td>
                <td>
                  <span>{request.type}</span>
                </td>
                <td style="text-align: center; white-space: nowrap;">
                  {request.since}
                </td>
                <td style="text-align: center;">
                  <Mult bonus={multiplier} />
                </td>
              </tr>
            )
          })
        }
      </tbody>
    </table>
  </Card>

  <Card title="Statistics" icon="seti:odata">
    <table style="border-collapse: collapse; width: 100%;">
      <thead>
        <tr>
          <th></th>
          <th style="text-align: left;">Name</th>
          <th style="text-align: center;">Docs</th>
          <th style="text-align: center;">Percentage</th>
          <th style="text-align: center;">Words</th>
          <th style="text-align: center;">Percentage</th>
          <th style="text-align: center;">Points</th>
        </tr>
      </thead>
      <tbody>
        {
          allTimeStats
            .sort((a, b) => a.name.toLowerCase().localeCompare(b.name))
            .map((member) => {
              return (
                <tr>
                  <td style="text-align: center">
                    {member.avatar && member.avatar !== "undefined" ? (
                      <Image
                        src={member.avatar}
                        alt="Avatar"
                        width="50"
                        height="50"
                        style="border-radius: 50%; object-fit: cover;"
                      />
                    ) : (
                      <Image
                        src={eng}
                        alt="Avatar"
                        width="50"
                        height="50"
                        style="border-radius: 50%; object-fit: cover;"
                      />
                    )}
                  </td>
                  <td style="text-align: left; vertical-align: middle; white-space: nowrap;">
                    {member.name}
                    {member.rank ? (
                      <span>
                        &ensp;
                        <TitleBadge rank={member.rank} />
                      </span>
                    ) : null}
                  </td>
                  <td style="text-align: center; vertical-align: middle;">
                    {member.docs}
                  </td>
                  <td style="text-align: center; vertical-align: middle;">
                    {Math.trunc((member.docs / sortedDocs.length) * 100)}
                  </td>
                  <td style="text-align: center; vertical-align: middle;">
                    {member.words}
                  </td>
                  <td style="text-align: center; vertical-align: middle;">
                    {Math.trunc(
                      (member.words /
                        sortedDocs.reduce(
                          (total, doc) => total + doc.body.length,
                          0
                        )) *
                        100
                    )}
                  </td>
                  <td style="text-align: center; vertical-align: middle;">
                    {member.score}
                  </td>
                </tr>
              )
            })
        }
      </tbody>
    </table>
  </Card>
</StarlightPage>
