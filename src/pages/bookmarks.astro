---
import bookmarkData from "../data/bookmarks.json"
import type { BookmarkData } from "../types/bookmarks"
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro"

const data: BookmarkData = bookmarkData
---

<StarlightPage
  hasSidebar={false}
  frontmatter={{
    title: "Bookmarks",
    category: "reference",
    owner: "ezekiel.nye@forfusion.com",
    createdBy: "ezekiel.nye@forfusion.com",
    createdOn: new Date("2024-11-10"),
    tableOfContents: false,
    head: [
      {
        tag: "style",
        content: `
.content-panel:has(h1#_top:not([data-page-title])) { display: none; }
.sl-markdown-content :not(a, strong, em, del, span, input, code, br) + :not(a, strong, em, del, span, input, code, br, :where(.not-content *)) {
    margin-top: 0rem !important;
}`,
      },
    ],
  }}
>
  <main>
    <div class="bookmarks-container">
      <div class="controls-layout">
        <div class="controls">
          <div class="controls-layout">
            <div class="search-container">
              <input
                type="text"
                id="bookmarkSearch"
                placeholder="Bookmark search..."
                class="search-input"
              />
            </div>

            <div class="filter-container">
              <button id="filterToggle" class="filter-toggle">
                <span>Filter</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M22 3H2l8 9.46V19l4 2v-8.54L22 3z"></path>
                </svg>
              </button>
              <div id="filterDropdown" class="filter-dropdown">
                <label class="filter-option select-all">
                  <input
                    type="checkbox"
                    checked
                    id="selectAll"
                    class="category-toggle"
                  />
                  <span>Select All</span>
                </label>
                <div class="filter-divider"></div>
                {
                  data.collections.map((collection) => (
                    <label class="filter-option">
                      <input
                        type="checkbox"
                        checked
                        data-category={collection.title}
                        class="category-toggle"
                      />
                      <span>{collection.title}</span>
                    </label>
                  ))
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="collections">
      {
        data.collections.map((collection) => (
          <div
            class="collection"
            data-search-container
            data-category={collection.title}
          >
            <div class="collection-header">
              <h2>{collection.title}</h2>
              {collection.description && (
                <p class="collection-description">{collection.description}</p>
              )}
            </div>

            <div class="buckets-wrapper">
              <div class="buckets">
                {collection.buckets
                  .sort((a, b) => {
                    return b.links.length - a.links.length
                  })
                  .map((bucket) => (
                    <div class="bucket" data-search-container>
                      <h3>{bucket.title}</h3>
                      {bucket.description && (
                        <p class="bucket-description">{bucket.description}</p>
                      )}

                      <div class="links">
                        {bucket.links.map((link) => (
                          <div class="bookmark" data-search-item>
                            {link.url ? (
                              <a
                                href={link.url}
                                target="_blank"
                                rel="noopener noreferrer"
                              >
                                {link.icon && (
                                  <span class="icon" set:html={link.icon} />
                                )}
                                <span class="title">{link.title}</span>
                              </a>
                            ) : (
                              <div class="header">
                                {link.icon && (
                                  <span class="icon" set:html={link.icon} />
                                )}
                                <span class="title">{link.title}</span>
                              </div>
                            )}

                            {link.description && (
                              <div class="notes">
                                <div class="note">
                                  <p>{link.description}</p>
                                </div>
                              </div>
                            )}

                            {link.tags && link.tags.length > 0 && (
                              <div class="tags">
                                {link.tags.map((tag) => (
                                  <span class="tag">{tag}</span>
                                ))}
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </main>
  <style>
    /* Container Layout */
    .bookmarks-container {
      width: 100%;
      max-width: 90rem;
      margin: 0 auto;
      padding: 0 1rem;
    }
    /* Controls Section */
    .controls {
      position: sticky;
      top: 0;
      z-index: 10;
      background: var(--sl-color-black);
      padding: 0.75rem 0;
      margin-bottom: 1rem;
    }

    .controls-layout {
      display: flex;
      gap: 0.75rem;
      align-items: center;
    }
    /* Search */
    .search-container {
      flex: 1;
      min-width: 0;
    }
    .search-input {
      width: 30rem;
      padding: 0.5rem 0.75rem;
      font-family: "Inter", sans-serif;
      font-size: 0.875rem;
      color: var(--sl-color-white);
      background: var(--sl-color-gray-7);
      border: 1px solid var(--sl-color-gray-6);
      border-radius: var(--radius-md);
      transition: all 0.2s ease;
    }
    .search-input:hover {
      border-color: var(--sl-color-accent);
      box-shadow: 0 0 0 2px var(--sl-color-accent-low);
    }
    .search-input:focus {
      background: var(--sl-color-gray-6);
      border-color: var(--brand-electric-teal);
      box-shadow: 0 0 0 2px var(--sl-color-accent-low);
    }
    /* Filter */
    .filter-container {
      position: relative;
    }
    .filter-toggle {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 0.75rem;
      font-family: "Inter", sans-serif;
      font-size: 0.875rem;
      color: var(--sl-color-white);
      background: var(--sl-color-gray-7);
      border: 1px solid var(--sl-color-gray-6);
      border-radius: var(--radius-md);
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .filter-toggle:hover {
      border-color: var(--sl-color-accent);
    }
    .filter-toggle:focus {
      background: var(--sl-color-gray-6);
      border-color: var(--brand-electric-teal);
    }
    .filter-dropdown {
      display: none;
      position: absolute;
      top: 100%;
      right: 0;
      margin-top: 0.25rem;
      padding: 0.5rem;
      background: var(--sl-color-gray-7);
      border: 1px solid var(--sl-color-gray-5);
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      min-width: 180px;
    }
    .filter-dropdown.show {
      display: block;
    }
    .filter-option {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.375rem 0.5rem;
      cursor: pointer;
      border-radius: var(--radius-sm);
      transition: background 0.2s ease;
    }
    .filter-option:hover {
      background: var(--sl-color-gray-6);
    }
    .filter-divider {
      height: 1px;
      background: var(--sl-color-gray-5);
      margin: 0.375rem 0;
    }
    /* Collections */
    .collections {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .collections a:hover {
      color: var(--brand-electric-teal) !important;
    }
    .collection-header {
      display: flex;
    }
    .collection h2 {
      font-family: "Rubrik Edge New", sans-serif;
      font-size: 1.125rem;
      font-weight: 500;
      color: var(--sl-color-white);
      margin: 0 0 0.5rem 0;
      padding-right: 20px;
    }
    .collection-description {
      font-family: "Inter", sans-serif;
      font-size: 0.875rem;
      color: var(--sl-color-gray-2);
      margin: 0 0 1rem 0;
      padding-left: 20px;
      border-left: 1px solid var(--sl-color-gray-6);
    }
    .collection {
      border: 1px solid var(--sl-color-gray-6);
      border-radius: var(--radius-lg);
      padding: 1rem;
      transition: all 0.2s ease;
    }
    .collection:hover {
      border-color: var(--sl-color-accent);
      box-shadow: 0 0 0 2px var(--sl-color-accent-low);
    }
    /* Buckets */
    .buckets {
      display: grid;
      grid-template-columns: repeat(
        8,
        1fr
      ); /* More granular columns for flexible sizing */
      grid-auto-rows: 25px; /* Base unit for row height calculations */
      grid-auto-flow: dense;
      gap: 1rem;
      width: 100%;
    }
    .bucket {
      display: flex;
      flex-direction: column;
      background: var(--sl-color-black);
      border: 1px solid var(--sl-color-gray-6);
      border-radius: var(--radius-md);
      padding: 0.75rem;
      transition: opacity 0.2s ease-in-out;
      opacity: 0; /* Start invisible while calculating */
    }
    .bucket h3 {
      font-family: "Rubrik Edge New", sans-serif;
      font-size: 1rem;
      font-weight: 500;
      color: var(--sl-color-white);
      margin: 0 0 0.5rem 0;
    }
    .bucket:hover {
      border-color: var(--sl-color-accent);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    .bucket-description {
      font-size: 0.875rem;
      color: var(--sl-color-gray-2);
      margin: 0 0 0.75rem 0;
    }
    .bucket.visible {
      opacity: 1;
    }
    /* Links and Bookmarks */
    .links {
      display: flex;
      flex-direction: column;
      gap: 0.2rem;
    }

    .bookmark {
      background: var(--sl-color-black);
      border-radius: var(--radius-lg);
      padding: 0.5rem;
      transition: all 0.2s ease;
    }

    .bookmark:hover {
      transform: translateY(-1px);
      box-shadow: var(--sl-shadow-sm);
      background: var(--sl-color-gray-6);
    }

    .bookmark:hover a {
      color: var(--brand-electric-teal);
    }

    .bookmark a {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--sl-color-white);
      text-decoration: underline;
      font-size: 0.875rem;
    }

    .bookmark .icon {
      flex: 0 0 auto;
      width: 1rem;
      height: 1rem;
    }

    .bookmark .title {
      flex: 1;
      min-width: 0;
      font-weight: 500;
    }

    /* Notes and Tags */
    .notes {
      margin-top: 0.5rem;
      padding-top: 0.5rem;
      border-top: 1px solid var(--sl-color-gray-6);
      font-size: 0.8125rem;
      color: var(--sl-color-gray-3);
    }

    .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.25rem;
      margin-top: 0.5rem;
    }

    .tag {
      padding: 0.125rem 0.375rem;
      font-size: 0.75rem;
      color: var(--sl-color-gray-2);
      background: var(--sl-color-gray-6);
      border-radius: var(--radius-sm);
    }

    /* Utilities */
    [data-hidden="true"] {
      display: none;
    }
  </style>
  <script>
    // Get DOM elements
    const searchInput = document.getElementById(
      "bookmarkSearch"
    ) as HTMLInputElement
    const filterToggle = document.getElementById(
      "filterToggle"
    ) as HTMLButtonElement
    const filterDropdown = document.getElementById(
      "filterDropdown"
    ) as HTMLDivElement
    const selectAllToggle = document.getElementById(
      "selectAll"
    ) as HTMLInputElement
    const categoryToggles = document.querySelectorAll(
      ".category-toggle:not(#selectAll)"
    ) as NodeListOf<HTMLInputElement>

    // Toggle filter dropdown
    filterToggle?.addEventListener("click", () => {
      filterDropdown?.classList.toggle("show")
    })

    // Close dropdown when clicking outside
    document.addEventListener("click", (event) => {
      if (
        !filterToggle?.contains(event.target as Node) &&
        !filterDropdown?.contains(event.target as Node)
      ) {
        filterDropdown?.classList.remove("show")
      }
    })

    // Track category visibility state
    const categoryStates = new Map<string, boolean>()
    categoryToggles.forEach((toggle) => {
      const category = toggle.dataset.category
      if (category) {
        categoryStates.set(category, true)
      }
    })

    // Handle select all toggle
    selectAllToggle?.addEventListener("change", () => {
      const isChecked = selectAllToggle.checked
      categoryToggles.forEach((toggle) => {
        toggle.checked = isChecked
        const category = toggle.dataset.category
        if (category) {
          categoryStates.set(category, isChecked)
        }
      })
      applyFiltersAndSearch()
    })

    // Update select all state when individual categories change
    function updateSelectAllState() {
      if (!selectAllToggle) return
      const allChecked = Array.from(categoryToggles).every(
        (toggle) => toggle.checked
      )
      const allUnchecked = Array.from(categoryToggles).every(
        (toggle) => !toggle.checked
      )

      selectAllToggle.checked = allChecked
      selectAllToggle.indeterminate = !allChecked && !allUnchecked
    }

    // Handle category toggle changes
    categoryToggles.forEach((toggle) => {
      toggle.addEventListener("change", () => {
        const category = toggle.dataset.category
        if (category) {
          categoryStates.set(category, toggle.checked)
          updateSelectAllState()
          applyFiltersAndSearch()
        }
      })
    })

    function updateContainerVisibility(container: Element) {
      const visibleItems = container.querySelectorAll(
        '[data-search-item]:not([data-hidden="true"])'
      )
      const visibleChildContainers = container.querySelectorAll(
        '[data-search-container]:not([data-hidden="true"])'
      )

      const isVisible =
        visibleItems.length > 0 || visibleChildContainers.length > 0
      container.setAttribute("data-hidden", (!isVisible).toString())

      // Recursively update parent containers
      const parentContainer = container.closest("[data-search-container]")
      if (parentContainer && parentContainer !== container) {
        updateContainerVisibility(parentContainer)
      }
    }

    function applyFiltersAndSearch() {
      // Reset all collection visibility first
      document.querySelectorAll(".collection").forEach((collection) => {
        const category = collection.getAttribute("data-category")
        if (category) {
          const isEnabled = categoryStates.get(category)
          collection.setAttribute("data-category-enabled", isEnabled.toString())
        }
      })

      const query = searchInput.value.toLowerCase()
      const enabledCollections = document.querySelectorAll(
        '[data-category-enabled="true"]'
      )

      enabledCollections.forEach((collection) => {
        let hasVisibleItems = false
        const items = collection.querySelectorAll("[data-search-item]")

        items.forEach((item) => {
          const searchText = [
            item.querySelector(".title")?.textContent || "",
            (item.querySelector("a") as HTMLAnchorElement)?.href || "",
            Array.from(item.querySelectorAll(".note"))
              .map((note) => note.textContent || "")
              .join(" "),
            Array.from(item.querySelectorAll(".tag"))
              .map((tag) => tag.textContent || "")
              .join(" "),
          ]
            .join(" ")
            .toLowerCase()

          const isVisible = searchText.includes(query)
          item.setAttribute("data-hidden", (!isVisible).toString())
          if (isVisible) hasVisibleItems = true
        })

        // Hide collection if it has no visible items after search
        collection.setAttribute("data-hidden", (!hasVisibleItems).toString())

        // Update nested container visibility
        const containers = Array.from(
          collection.querySelectorAll("[data-search-container]")
        ).reverse()

        containers.forEach((container) => {
          updateContainerVisibility(container)
        })
      })

      // Hide any collections that were category-disabled
      document
        .querySelectorAll('[data-category-enabled="false"]')
        .forEach((collection) => {
          collection.setAttribute("data-hidden", "true")
        })
    }

    // Add search input event listener
    searchInput?.addEventListener("input", applyFiltersAndSearch)
  </script>
  <script>
    function calculateOptimalSpans() {
      const buckets = document.querySelectorAll(".bucket")
      const baseUnit = 30 // Should match grid-auto-rows value
      const containerWidth = document.querySelector(".buckets").clientWidth
      const gap = 16 // 1rem in pixels

      // First pass: measure natural dimensions
      buckets.forEach((bucket) => {
        // Clone bucket to measure its natural size
        const clone = bucket.cloneNode(true)
        clone.style.cssText = `
          position: absolute;
          visibility: hidden;
          width: auto;
          height: auto;
          grid-column: unset;
          grid-row: unset;
        `
        document.body.appendChild(clone)

        // Get natural dimensions
        const rect = clone.getBoundingClientRect()
        const naturalWidth = rect.width
        const naturalHeight = rect.height

        document.body.removeChild(clone)

        // Calculate optimal spans
        const maxCols = parseInt(
          getComputedStyle(bucket.parentElement).gridTemplateColumns.split(" ")
            .length
        )
        const unitWidth = (containerWidth - gap * (maxCols - 1)) / maxCols

        // Calculate spans while maintaining aspect ratio
        let colSpan = Math.min(Math.ceil(naturalWidth / unitWidth), maxCols)
        let rowSpan = Math.ceil(naturalHeight / baseUnit)

        // Adjust spans to maintain reasonable proportions
        if (colSpan > 1 && rowSpan === 1) {
          rowSpan = 2
        }

        // Apply spans
        bucket.style.gridColumn = `span ${colSpan}`
        bucket.style.gridRow = `span ${rowSpan}`
        bucket.dataset.colSpan = colSpan
        bucket.dataset.rowSpan = rowSpan
      })

      // Second pass: optimize layout
      let totalArea = 0
      buckets.forEach((bucket) => {
        const area =
          parseInt(bucket.dataset.colSpan) * parseInt(bucket.dataset.rowSpan)
        totalArea += area
      })

      // Make buckets visible once positioned
      requestAnimationFrame(() => {
        buckets.forEach((bucket) => bucket.classList.add("visible"))
      })
    }

    // Initialize and handle updates
    function initializeTiling() {
      // Hide buckets initially
      document.querySelectorAll(".bucket").forEach((bucket) => {
        bucket.classList.remove("visible")
      })

      calculateOptimalSpans()
    }

    // Debounced resize handler
    let resizeTimeout
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout)
      resizeTimeout = setTimeout(initializeTiling, 250)
    })

    // Handle dynamic content changes
    const observer = new MutationObserver((mutations) => {
      const contentChanged = mutations.some((mutation) => {
        return Array.from(mutation.addedNodes).some(
          (node) =>
            node.nodeType === 1 &&
            (node.classList.contains("bucket") || node.querySelector(".bucket"))
        )
      })

      if (contentChanged) {
        initializeTiling()
      }
    })

    document.querySelectorAll(".buckets").forEach((bucketsContainer) => {
      observer.observe(bucketsContainer, {
        childList: true,
        subtree: true,
        characterData: true,
      })
    })

    // Initial calculation after content loads
    window.addEventListener("load", initializeTiling)
  </script>
</StarlightPage>
